// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 401
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDbFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_FAILED.String() && e.Code == 500
}

func ErrorDbFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DB_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOrderReviewed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_REVIEWED.String() && e.Code == 501
}

func ErrorOrderReviewed(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorReason_ORDER_REVIEWED.String(), fmt.Sprintf(format, args...))
}

func IsReviewNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_NOT_FOUND.String() && e.Code == 502
}

func ErrorReviewNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_REVIEW_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsStoreNotMatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_STORE_NOT_MATCH.String() && e.Code == 503
}

func ErrorStoreNotMatch(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_STORE_NOT_MATCH.String(), fmt.Sprintf(format, args...))
}

func IsReviewReplyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_REPLY_EXISTS.String() && e.Code == 504
}

func ErrorReviewReplyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorReason_REVIEW_REPLY_EXISTS.String(), fmt.Sprintf(format, args...))
}
